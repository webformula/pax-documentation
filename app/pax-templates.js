/* eslint-disable quotes */
/* eslint-disable no-template-curly-in-string */
window._templates = {
  "pages/documentation/bare-bones/page.html": "<div class=\"disclaimer-container\">\n  Disclaimer: This is a beta version\n</div>\n\n<article>\n  <article class=\"into-article\">\n    <h2>Bare bones example</h2>\n  </article>\n\n  <h6 style=\"padding-left:24px;\">Quick links</h6>\n  <ul>\n    <li>\n      <anchor-link selector=\"#structure\" offset=\"56\">Project structure</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#installation\" offset=\"56\">Installation</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#indexhtml\" offset=\"56\">Create index.html</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#create-our-fist-page\" offset=\"56\">Create our fist page</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#lets-run-it\" offset=\"56\">Lets run it</anchor-link>\n    </li>\n  </ul>\n\n  <article class=\"sub-article\" id=\"a-quick-note\">\n    <h4>A quick note</h4>\n    <p>This is a bare bones example, if you want an example with a production build process check out this <a href=\"#/documentation/quick-start\">link</a></p>\n    <p>\n      If you looking for a real world example, you can check out the repo for this website. The PAX documentation\n      website is built using itself. <a href=\"https://github.com/pacts-org/pacts-documentation\" target=\"new\">GitHub Repo</a>\n    </p>\n  </article>\n\n  <article class=\"sub-article\" id=\"structure\">\n    <h4>Project structure</h4>\n    <monaco-editor language=\"yaml\">\n      app/\n        pages/\n          helloWorld/\n            page.js\n            page.html\n      index.html\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"installation\">\n    <h4>Installation</h4>\n    <p>You can install pax-core through NPM</p>\n    <monaco-editor language=\"shell\">\n      // The only required package\n      npm i @webformula/pax-core --save\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"indexhtml\">\n    <h4>Create index html</h4>\n    <p class=\"direction\">Create index html <b>app/index.html</b></p>\n    <monaco-editor language=\"html\" id=\"indexhtml-editor\"></monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"create-our-fist-page\">\n    <h4>Create our fist page</h4>\n\n    <p class=\"direction\">Create page file <b>app/pages/helloWorld.js</b></p>\n    <monaco-editor id=\"editor-1\" language=\"javascript\"></monaco-editor>\n    <monaco-editor id=\"editor-2\" language=\"html\"></monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"lets-run-it\">\n    <h4>Lets run it</h4>\n    <p>Simply load your index.html file in a browser.</p>\n    <p>For convienience you can use \"http-serve\" or \"snowpack\" npm package to serve your files locally</p>\n  </article>\n\n  <section>\n    <a class=\"button\" href=\"#/documentation/routing\">Next: Routing</a>\n  </section>\n</article>\n",
  "pages/documentation/browsers/page.html": "<article class=\"page-article\">\n  <h1 class=\"article-title\">Browser compatibility</h1>\n\n  <section>\n    <h2>Web components</h2>\n    <p>PAX-CORE uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" target=\"_blank\">web\n        components</a>. Web componets are currently supported by most of the major browsers. If you need to exapnd your\n      browser support there is also a polyfill that exapnds support to IE11.</p>\n  </section>\n\n  <mdw-row class=\"mdw-flex-wrap\">\n    <section mdw-flex style=\"margin-top: 54px\">\n      <h2>Desktop</h2>\n      <mdw-list>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"chrome.png\" width=\"24\" height=\"24\">\n          </span>\n          Chrome (67 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"firefox.png\" width=\"24\" height=\"24\">\n          </span>\n          Firefox (63 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"safari.png\" width=\"24\" height=\"24\">\n          </span>\n          Safari (10.1 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"opera.png\" width=\"24\" height=\"24\">\n          </span>\n          Opera (41 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"edge.png\" width=\"24\" height=\"24\">\n          </span>\n          Edge (76 Anaheim)\n        </mdw-list-item>\n      </mdw-list>\n    </section>\n\n    <section mdw-flex style=\"margin-top: 54px\">\n      <h2>Mobile</h2>\n      <mdw-list>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"chrome.png\" width=\"24\" height=\"24\">\n          </span>\n          Chrome (76 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"firefox.png\" width=\"24\" height=\"24\">\n          </span>\n          Firefox (68 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"safari.png\" width=\"24\" height=\"24\">\n          </span>\n          Safari (10.3 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"opera.png\" width=\"24\" height=\"24\">\n          </span>\n          Opera Mobile (46 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"android.png\" width=\"24\" height=\"24\">\n          </span>\n          Android browser (76 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"samsung-internet.png\" width=\"24\" height=\"24\">\n          </span>\n          Samsung internet (6.2 +)\n        </mdw-list-item>\n        <mdw-list-item>\n          <span class=\"mdw-list-item__graphic material-icons\">\n            <img src=\"uc-browser.png\" width=\"24\" height=\"24\">\n          </span>\n          UC Browser (12.12 +)\n        </mdw-list-item>\n      </mdw-list>\n      <mdw-list-item>\n        <span class=\"mdw-list-item__graphic material-icons\">\n          <img src=\"baidu.png\" width=\"24\" height=\"24\">\n        </span>\n        Baidu Browser 7.12 +)\n      </mdw-list-item>\n      </mdw-list>\n    </section>\n  </mdw-row>\n\n  <section>\n    <a href=\"#/documentation/quick-start\">next: Quick start</a>\n  </section>\n</article>\n",
  "pages/documentation/building-pages/page.html": "<div class=\"disclaimer-container\">\n  Disclaimer: This is a beta version\n</div>\n\n<article>\n  <article class=\"into-article\">\n    <h2>Building pages</h2>\n    <p>\n      Below are a list of examples showing how to build pages with a range of features, including dynamic html rendering.\n    </p>\n  </article>\n\n  <h6 style=\"padding-left:24px;\">Quick links</h6>\n  <ul>\n    <li>\n      <anchor-link selector=\"#basic-page\" offset=\"56px\">Basic page</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#interactive-page\" offset=\"56px\">Interactive page</anchor-link>\n    </li>\n    <li><a href=\"/documentation/page-mapper\">Next: Page Mapper</a></li>\n  </ul>\n\n  <article class=\"sub-article\" id=\"basic-page\">\n    <h4>Basic page</h4>\n    <monaco-editor language=\"javascript\">\n      // basic page that uses server side rendering\n      import { Page } from '@webformula/pax-core';\n\n      export default class BasicPage extends Page {\n        constructor() {\n          super();\n          this.label = 'Basic Page';\n        }\n\n        get title() {\n          return 'Basic page';\n        }\n\n        styles() {\n          return \\`\n            .customclass { }\n          \\`;\n        }\n\n        template() {\n          return './page.html';\n        }\n      };\n    </monaco-editor>\n    <monaco-editor language=\"html\">\n      <!-- page.html -->\n      <div id=\"content\">\n        <h2>\\${this.label}</h2>\n      </div>\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"interactive-page\">\n    <h4>Interactive page</h4>\n    <p>Re-render the page when data is updated</p>\n    <monaco-editor language=\"javascript\">\n      import { Page } from '@webformula/pax-core';\n      import { getStates } from '../services/states';\n\n      export default class InteractivePage extends Page {\n        constructor() {\n          super();\n\n          // create default state for data\n          this.list = [];\n          this.states = [];\n          this.cities = [];\n          this.selectedState = null;\n          this.selectedCity = null;\n        }\n\n        // page title\n        get title() {\n          return 'Interactive';\n        }\n\n        async connectedCallback() {\n          // axios is imported by the client\n          const { data } = await axios.get('/api/states');\n          this.states = data.states;\n          // re render page once we recieve data from the server\n          this.render(); // re-render the page. This method is made available by the 'Page' class\n        }\n\n        stateSelectChange(value) {\n          this.selectedState = value;\n          const state = this.states.find(i => i.name === value);\n          if (state) this.cities = state.cities;\n          else this.cities = [];\n          this.selectedCity = null;\n          this.render(); // re-render the page. This method is made available by the 'Page' class\n        }\n\n        citySelectChange(value) {\n          this.selectedCity = value;\n        }\n\n        // use html file in same directory\n        template() {\n          return './page.html';\n        }\n\n        // you can also embed the html into the file directly\n        // template() {\n        //   return \\`\n        //     <div>\n        //       ...\n        //     </div>\n        //   \\`;\n        // }\n      }\n    </monaco-editor>\n\n    <monaco-editor language=\"html\">\n      <!-- page.html -->\n      <h2>Interactive</h2>\n      <div>\n        <select onchange=\"activePage.stateSelectChange(this.value)\" mdw-value=\"/${this.selectedState}\">\n          <option value=\"\" disabled>State...</option>\n          \\${this.states.map(function (s) { return \\`\n            <option value=\"\\${s.name}\">\\${s.name}</option>\n          \\`;}).join('\\\\n')}\n        </select>\n        <select onchange=\"activePage.citySelectChange(this.value)\" mdw-value=\"/${this.selectedCity}\">\n          <option value=\"\" disabled>City...</option>\n          \\${this.cities.map(function (c) { return \\`\n            <option value=\"\\${c.name}\">\\${c.name}</option>\n          \\`;}).join('\\\\n')}\n        </select>\n      </div>\n    </monaco-editor>\n  </article>\n\n  <section>\n    <a class=\"button\" href=\"#/documentation/web-components\">Next: Web components</a>\n  </section>\n</article>\n",
  "pages/documentation/quick-start/page.html": "<div class=\"disclaimer-container\">\n  Disclaimer: This is a beta version\n</div>\n\n<article>\n  <article class=\"into-article\">\n    <h2>Quick Start guide</h2>\n    <p>Lets build a small site</p>\n  </article>\n\n  <h6 style=\"padding-left:24px;\">Quick links</h6>\n  <ul>\n    <li>\n      <anchor-link selector=\"#structure\" offset=\"56\">Project structure</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#installation\" offset=\"56\">Installation</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#indexhtml\" offset=\"56\">Create index.html</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#create-our-fist-page\" offset=\"56\">Create our fist page</anchor-link>\n    </li>\n    <li>\n      <anchor-link selector=\"#lets-run-it\" offset=\"56\">Lets run it</anchor-link>\n    </li>\n    <li><a href=\"/documentation/pages\">Next: Building pages</a></li>\n  </ul>\n\n  <article class=\"sub-article\" id=\"a-quick-note\">\n    <h4>A quick note</h4>\n    <p>This is a full example including a build process for production. Check this link out for a bare bones no build process example <a href=\"#/documentation/bare-bones\">Quick start</a></p>\n    <p>\n      If you looking for a real world example, you can check out the repo for this website. The PAX documentation\n      website is built using itself. <a href=\"https://github.com/pacts-org/pacts-documentation\" target=\"new\">GitHub Repo</a>\n    </p>\n  </article>\n\n  <article class=\"sub-article\" id=\"structure\">\n    <h4>Project structure</h4>\n    <monaco-editor language=\"yaml\">\n      app/\n        pages/\n          helloWorld/\n            page.js\n            page.html\n        pax-entry.js\n        index.html\n      snowpack.config.json\n      package.json\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"installation\">\n    <h4>Installation</h4>\n    <p>You can install pax-core through NPM</p>\n    <monaco-editor language=\"shell\">\n      // The only required package\n      npm i @webformula/pax-core --save\n\n      // install these to get a full development environment started\n      // you will need these for this quickstart\n      npm i snowpack nodemon --save-dev\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"paxbuild\">\n    <h4>PAX build</h4>\n    <p>This is a optional build step that will auto generate you entry file and compile your html into a single template cache</p>\n    <p class=\"direction\">Create pax build config <b>buildEntry.mjs</b></p>\n    <monaco-editor language=\"javascript\">\n      import buildEntry from '@webformula/pax-core/src/buildEntry.js';\n      \n      buildEntry({\n        rootFolder: 'app',\n        pagesFolder: 'pages',\n        templateFile: true,\n        routerConfig: {\n          root: 'Home'\n        }\n      });\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"nodemon\">\n    <h4>Nodemon</h4>\n    <p>Auto rebuild all the things whenever any file changes</p>\n    <p class=\"direction\">Create nodemon config <b>Nodemon.json</b></p>\n    <monaco-editor language=\"json\">\n      {\n        \"watch\": [\n          \"app/\"\n        ],\n        \"ext\": \"js, css, html\",\n        \"ignore\": [\n          \"app/pax-entry.js\",\n          \"app/pax-templates.js\"\n        ]\n      }\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"snowpack\">\n    <h4>Snowpack</h4>\n    <p>Snowpack is a great build tool that can make development and building much faster and simpler</p>\n    <p class=\"direction\">Create snowpack config <b>snowpack.config.json</b></p>\n    <monaco-editor language=\"json\">\n      {\n        \"scripts\": {\n          \"run:js,html\": \"node --experimental-modules buildEntry.mjs\",\n          \"run:js,html::watch\": \"nodemon -x $1\",\n          \"mount:src\": \"mount app --to /\",\n          \"mount:public\": \"mount app/public --to /\",\n          \"mount:webmodules\": \"mount web_modules\"\n        },\n        \"install\": [\n          \"@webformula/pax-core\"\n        ]\n      }\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"package-scripts\">\n    <h4>Package.json scrips</h4>\n    <p>The only scripts you'll need</p>\n    <p class=\"direction\">Create package.json <b>package.json</b></p>\n    <monaco-editor language=\"json\">\n      {\n        \"scripts\": {\n          \"start\": \"snowpack dev\",\n          \"release\": \"snowpack build\"\n        }\n      }\n    </monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"indexhtml\">\n    <h4>Create index html</h4>\n    <p class=\"direction\">Create index html <b>app/index.html</b></p>\n    <monaco-editor language=\"html\" id=\"indexhtml-editor\"></monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"create-our-fist-page\">\n    <h4>Create our fist page</h4>\n\n    <p class=\"direction\">Create page file <b>app/pages/helloWorld.js</b></p>\n    <monaco-editor id=\"editor-1\" language=\"javascript\"></monaco-editor>\n    <monaco-editor id=\"editor-2\" language=\"html\"></monaco-editor>\n  </article>\n\n  <article class=\"sub-article\" id=\"lets-run-it\">\n    <h4>Lets run it</h4>\n    <p>You no have a fully functional site!</p>\n    <monaco-editor language=\"shell\">\n      node start\n    </monaco-editor>\n    <div class=\"direction\">Navigate to <a href=\"http://localhost:8080\" target=\"_blank\">http://localhost:8080</a></div>\n  </article>\n\n  <section>\n    <a class=\"button\" href=\"#/documentation/routing\">Next: Routing</a>\n  </section>\n</article>\n",
  "pages/documentation/why/page.html": "<article class=\"into-article\">\n  <h3>Why?</h3>\n  <p>\n    One might ask <b>why another framework?</b> My first response to that question is \"this is not a framework\". PAX is a tool set that can replace the need for a framework.\n    Browsers have come a very long way since the days of IE. The modern browser is powerful and concise. You can achieve 95% of the things you need with just the browser these days.\n    With the recent addition of web-components we can built powerful elegant applications with almost no 3rd party modules.\n  </p>\n  <p>\n    <b>PAX</b> provides the missing 5% of what the browser does not. Page classes, dynamic rendering, and routing.\n  </p>\n\n\n  <h6><b>Lets focus on the development process?</b></h6>\n  <p>Todays applications can be a burden on developers. You install a bucket of dependencies, setup multiple tools on your computer and wait seconds every time you make a code change to see it realized on the screen.</p>\n  <p>\n    PAX relies on todays best practices and standards like ES modules. This means there is no need for build tools while developing. All the major browsers support ES modules directly. This means the code you write is the code that runs. No source maps, no waiting for webpack to build and no transpiling.\n    This makes debugging and understanding your code simple.\n  </p>\n  <p>\n    The goal is to get back the what was great about the web, write code, run code, release code. What you see is what you get!\n  </p>\n\n</article>\n"
};